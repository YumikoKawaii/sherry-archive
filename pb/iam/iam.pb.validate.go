// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: iam/iam.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on GetUserDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDetailRequestMultiError, or nil if none found.
func (m *GetUserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserDetailRequestMultiError(errors)
	}

	return nil
}

// GetUserDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDetailRequestMultiError) AllErrors() []error { return m }

// GetUserDetailRequestValidationError is the validation error returned by
// GetUserDetailRequest.Validate if the designated constraints aren't met.
type GetUserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDetailRequestValidationError) ErrorName() string {
	return "GetUserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDetailRequestValidationError{}

// Validate checks the field values on GetUserDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDetailResponseMultiError, or nil if none found.
func (m *GetUserDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserDetailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserDetailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserDetailResponseMultiError(errors)
	}

	return nil
}

// GetUserDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDetailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDetailResponseMultiError) AllErrors() []error { return m }

// GetUserDetailResponseValidationError is the validation error returned by
// GetUserDetailResponse.Validate if the designated constraints aren't met.
type GetUserDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDetailResponseValidationError) ErrorName() string {
	return "GetUserDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDetailResponseValidationError{}

// Validate checks the field values on UpsertUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpsertUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertUserRequestMultiError, or nil if none found.
func (m *UpsertUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	if len(errors) > 0 {
		return UpsertUserRequestMultiError(errors)
	}

	return nil
}

// UpsertUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpsertUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpsertUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertUserRequestMultiError) AllErrors() []error { return m }

// UpsertUserRequestValidationError is the validation error returned by
// UpsertUserRequest.Validate if the designated constraints aren't met.
type UpsertUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertUserRequestValidationError) ErrorName() string {
	return "UpsertUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertUserRequestValidationError{}

// Validate checks the field values on UpsertUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertUserResponseMultiError, or nil if none found.
func (m *UpsertUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertUserResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertUserResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertUserResponseMultiError(errors)
	}

	return nil
}

// UpsertUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpsertUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpsertUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertUserResponseMultiError) AllErrors() []error { return m }

// UpsertUserResponseValidationError is the validation error returned by
// UpsertUserResponse.Validate if the designated constraints aren't met.
type UpsertUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertUserResponseValidationError) ErrorName() string {
	return "UpsertUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertUserResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Department

	// no validation rules for Status

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on VerifyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyRequestMultiError, or
// nil if none found.
func (m *VerifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Action

	if len(errors) > 0 {
		return VerifyRequestMultiError(errors)
	}

	return nil
}

// VerifyRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyRequestMultiError) AllErrors() []error { return m }

// VerifyRequestValidationError is the validation error returned by
// VerifyRequest.Validate if the designated constraints aren't met.
type VerifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyRequestValidationError) ErrorName() string { return "VerifyRequestValidationError" }

// Error satisfies the builtin error interface
func (e VerifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyRequestValidationError{}

// Validate checks the field values on VerifyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyResponseMultiError,
// or nil if none found.
func (m *VerifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return VerifyResponseMultiError(errors)
	}

	return nil
}

// VerifyResponseMultiError is an error wrapping multiple validation errors
// returned by VerifyResponse.ValidateAll() if the designated constraints
// aren't met.
type VerifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyResponseMultiError) AllErrors() []error { return m }

// VerifyResponseValidationError is the validation error returned by
// VerifyResponse.Validate if the designated constraints aren't met.
type VerifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyResponseValidationError) ErrorName() string { return "VerifyResponseValidationError" }

// Error satisfies the builtin error interface
func (e VerifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyResponseValidationError{}

// Validate checks the field values on RegisterResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponse_DataMultiError, or nil if none found.
func (m *RegisterResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return RegisterResponse_DataMultiError(errors)
	}

	return nil
}

// RegisterResponse_DataMultiError is an error wrapping multiple validation
// errors returned by RegisterResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type RegisterResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponse_DataMultiError) AllErrors() []error { return m }

// RegisterResponse_DataValidationError is the validation error returned by
// RegisterResponse_Data.Validate if the designated constraints aren't met.
type RegisterResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponse_DataValidationError) ErrorName() string {
	return "RegisterResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponse_DataValidationError{}

// Validate checks the field values on LoginResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginResponse_DataMultiError, or nil if none found.
func (m *LoginResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginResponse_DataMultiError(errors)
	}

	return nil
}

// LoginResponse_DataMultiError is an error wrapping multiple validation errors
// returned by LoginResponse_Data.ValidateAll() if the designated constraints
// aren't met.
type LoginResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponse_DataMultiError) AllErrors() []error { return m }

// LoginResponse_DataValidationError is the validation error returned by
// LoginResponse_Data.Validate if the designated constraints aren't met.
type LoginResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponse_DataValidationError) ErrorName() string {
	return "LoginResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e LoginResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponse_DataValidationError{}

// Validate checks the field values on GetUserDetailResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDetailResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDetailResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDetailResponse_DataMultiError, or nil if none found.
func (m *GetUserDetailResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDetailResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserDetailResponse_DataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserDetailResponse_DataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserDetailResponse_DataValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserDetailResponse_DataMultiError(errors)
	}

	return nil
}

// GetUserDetailResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetUserDetailResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetUserDetailResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDetailResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDetailResponse_DataMultiError) AllErrors() []error { return m }

// GetUserDetailResponse_DataValidationError is the validation error returned
// by GetUserDetailResponse_Data.Validate if the designated constraints aren't met.
type GetUserDetailResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDetailResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDetailResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDetailResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDetailResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDetailResponse_DataValidationError) ErrorName() string {
	return "GetUserDetailResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDetailResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDetailResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDetailResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDetailResponse_DataValidationError{}

// Validate checks the field values on UpsertUserResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertUserResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertUserResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertUserResponse_DataMultiError, or nil if none found.
func (m *UpsertUserResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertUserResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertUserResponse_DataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertUserResponse_DataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertUserResponse_DataValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertUserResponse_DataMultiError(errors)
	}

	return nil
}

// UpsertUserResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UpsertUserResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UpsertUserResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertUserResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertUserResponse_DataMultiError) AllErrors() []error { return m }

// UpsertUserResponse_DataValidationError is the validation error returned by
// UpsertUserResponse_Data.Validate if the designated constraints aren't met.
type UpsertUserResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertUserResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertUserResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertUserResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertUserResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertUserResponse_DataValidationError) ErrorName() string {
	return "UpsertUserResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertUserResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertUserResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertUserResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertUserResponse_DataValidationError{}
