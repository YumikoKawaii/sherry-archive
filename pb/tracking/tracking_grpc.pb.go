// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: tracking/tracking.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrackingService_LogEntry_FullMethodName   = "/sherry.archive.tracking.api.v1.TrackingService/LogEntry"
	TrackingService_LogEntries_FullMethodName = "/sherry.archive.tracking.api.v1.TrackingService/LogEntries"
)

// TrackingServiceClient is the client API for TrackingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackingServiceClient interface {
	LogEntry(ctx context.Context, in *LogEntryRequest, opts ...grpc.CallOption) (*LogEntryResponse, error)
	LogEntries(ctx context.Context, in *LogEntriesRequest, opts ...grpc.CallOption) (*LogEntriesRequest, error)
}

type trackingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackingServiceClient(cc grpc.ClientConnInterface) TrackingServiceClient {
	return &trackingServiceClient{cc}
}

func (c *trackingServiceClient) LogEntry(ctx context.Context, in *LogEntryRequest, opts ...grpc.CallOption) (*LogEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogEntryResponse)
	err := c.cc.Invoke(ctx, TrackingService_LogEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServiceClient) LogEntries(ctx context.Context, in *LogEntriesRequest, opts ...grpc.CallOption) (*LogEntriesRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogEntriesRequest)
	err := c.cc.Invoke(ctx, TrackingService_LogEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackingServiceServer is the server API for TrackingService service.
// All implementations must embed UnimplementedTrackingServiceServer
// for forward compatibility.
type TrackingServiceServer interface {
	LogEntry(context.Context, *LogEntryRequest) (*LogEntryResponse, error)
	LogEntries(context.Context, *LogEntriesRequest) (*LogEntriesRequest, error)
	mustEmbedUnimplementedTrackingServiceServer()
}

// UnimplementedTrackingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrackingServiceServer struct{}

func (UnimplementedTrackingServiceServer) LogEntry(context.Context, *LogEntryRequest) (*LogEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogEntry not implemented")
}
func (UnimplementedTrackingServiceServer) LogEntries(context.Context, *LogEntriesRequest) (*LogEntriesRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogEntries not implemented")
}
func (UnimplementedTrackingServiceServer) mustEmbedUnimplementedTrackingServiceServer() {}
func (UnimplementedTrackingServiceServer) testEmbeddedByValue()                         {}

// UnsafeTrackingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackingServiceServer will
// result in compilation errors.
type UnsafeTrackingServiceServer interface {
	mustEmbedUnimplementedTrackingServiceServer()
}

func RegisterTrackingServiceServer(s grpc.ServiceRegistrar, srv TrackingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrackingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrackingService_ServiceDesc, srv)
}

func _TrackingService_LogEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServiceServer).LogEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackingService_LogEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServiceServer).LogEntry(ctx, req.(*LogEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingService_LogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServiceServer).LogEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackingService_LogEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServiceServer).LogEntries(ctx, req.(*LogEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackingService_ServiceDesc is the grpc.ServiceDesc for TrackingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sherry.archive.tracking.api.v1.TrackingService",
	HandlerType: (*TrackingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogEntry",
			Handler:    _TrackingService_LogEntry_Handler,
		},
		{
			MethodName: "LogEntries",
			Handler:    _TrackingService_LogEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracking/tracking.proto",
}
