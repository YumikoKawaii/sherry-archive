// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tracking/events.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LogEntry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogEntryMultiError, or nil
// if none found.
func (m *LogEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *LogEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	// no validation rules for Payload

	if len(errors) > 0 {
		return LogEntryMultiError(errors)
	}

	return nil
}

// LogEntryMultiError is an error wrapping multiple validation errors returned
// by LogEntry.ValidateAll() if the designated constraints aren't met.
type LogEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogEntryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogEntryMultiError) AllErrors() []error { return m }

// LogEntryValidationError is the validation error returned by
// LogEntry.Validate if the designated constraints aren't met.
type LogEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogEntryValidationError) ErrorName() string { return "LogEntryValidationError" }

// Error satisfies the builtin error interface
func (e LogEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogEntryValidationError{}

// Validate checks the field values on DocumentView with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DocumentView) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentView with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DocumentViewMultiError, or
// nil if none found.
func (m *DocumentView) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentView) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrackingId

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentViewValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentViewValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentViewValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentViewValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentViewValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentViewValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return DocumentViewMultiError(errors)
	}

	return nil
}

// DocumentViewMultiError is an error wrapping multiple validation errors
// returned by DocumentView.ValidateAll() if the designated constraints aren't met.
type DocumentViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentViewMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentViewMultiError) AllErrors() []error { return m }

// DocumentViewValidationError is the validation error returned by
// DocumentView.Validate if the designated constraints aren't met.
type DocumentViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentViewValidationError) ErrorName() string { return "DocumentViewValidationError" }

// Error satisfies the builtin error interface
func (e DocumentViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentViewValidationError{}

// Validate checks the field values on ChapterView with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChapterView) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChapterView with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChapterViewMultiError, or
// nil if none found.
func (m *ChapterView) ValidateAll() error {
	return m.validate(true)
}

func (m *ChapterView) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrackingId

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChapterViewValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChapterViewValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChapterViewValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChapterViewValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChapterViewValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChapterViewValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ChapterId

	if len(errors) > 0 {
		return ChapterViewMultiError(errors)
	}

	return nil
}

// ChapterViewMultiError is an error wrapping multiple validation errors
// returned by ChapterView.ValidateAll() if the designated constraints aren't met.
type ChapterViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChapterViewMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChapterViewMultiError) AllErrors() []error { return m }

// ChapterViewValidationError is the validation error returned by
// ChapterView.Validate if the designated constraints aren't met.
type ChapterViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterViewValidationError) ErrorName() string { return "ChapterViewValidationError" }

// Error satisfies the builtin error interface
func (e ChapterViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterViewValidationError{}

// Validate checks the field values on ChapterCompleted with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChapterCompleted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChapterCompleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChapterCompletedMultiError, or nil if none found.
func (m *ChapterCompleted) ValidateAll() error {
	return m.validate(true)
}

func (m *ChapterCompleted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrackingId

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChapterCompletedValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChapterCompletedValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChapterCompletedValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChapterCompletedValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChapterCompletedValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChapterCompletedValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ChapterId

	if len(errors) > 0 {
		return ChapterCompletedMultiError(errors)
	}

	return nil
}

// ChapterCompletedMultiError is an error wrapping multiple validation errors
// returned by ChapterCompleted.ValidateAll() if the designated constraints
// aren't met.
type ChapterCompletedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChapterCompletedMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChapterCompletedMultiError) AllErrors() []error { return m }

// ChapterCompletedValidationError is the validation error returned by
// ChapterCompleted.Validate if the designated constraints aren't met.
type ChapterCompletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterCompletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterCompletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterCompletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterCompletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterCompletedValidationError) ErrorName() string { return "ChapterCompletedValidationError" }

// Error satisfies the builtin error interface
func (e ChapterCompletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapterCompleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterCompletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterCompletedValidationError{}

// Validate checks the field values on DocumentFavorited with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DocumentFavorited) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentFavorited with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DocumentFavoritedMultiError, or nil if none found.
func (m *DocumentFavorited) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentFavorited) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrackingId

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentFavoritedValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentFavoritedValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentFavoritedValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentFavoritedValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentFavoritedValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentFavoritedValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return DocumentFavoritedMultiError(errors)
	}

	return nil
}

// DocumentFavoritedMultiError is an error wrapping multiple validation errors
// returned by DocumentFavorited.ValidateAll() if the designated constraints
// aren't met.
type DocumentFavoritedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentFavoritedMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentFavoritedMultiError) AllErrors() []error { return m }

// DocumentFavoritedValidationError is the validation error returned by
// DocumentFavorited.Validate if the designated constraints aren't met.
type DocumentFavoritedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentFavoritedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentFavoritedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentFavoritedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentFavoritedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentFavoritedValidationError) ErrorName() string {
	return "DocumentFavoritedValidationError"
}

// Error satisfies the builtin error interface
func (e DocumentFavoritedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentFavorited.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentFavoritedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentFavoritedValidationError{}
