// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: archive/archive.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentsRequestMultiError, or nil if none found.
func (m *GetDocumentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategoryId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentsRequestValidationError{
					field:  "CategoryId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentsRequestValidationError{
					field:  "CategoryId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategoryId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentsRequestValidationError{
				field:  "CategoryId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuthorId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentsRequestValidationError{
					field:  "AuthorId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentsRequestValidationError{
					field:  "AuthorId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthorId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentsRequestValidationError{
				field:  "AuthorId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublisherId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentsRequestValidationError{
					field:  "PublisherId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentsRequestValidationError{
					field:  "PublisherId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublisherId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentsRequestValidationError{
				field:  "PublisherId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetDocumentsRequestMultiError(errors)
	}

	return nil
}

// GetDocumentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetDocumentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDocumentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentsRequestMultiError) AllErrors() []error { return m }

// GetDocumentsRequestValidationError is the validation error returned by
// GetDocumentsRequest.Validate if the designated constraints aren't met.
type GetDocumentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentsRequestValidationError) ErrorName() string {
	return "GetDocumentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentsRequestValidationError{}

// Validate checks the field values on GetDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentsResponseMultiError, or nil if none found.
func (m *GetDocumentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDocumentsResponseMultiError(errors)
	}

	return nil
}

// GetDocumentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetDocumentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDocumentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentsResponseMultiError) AllErrors() []error { return m }

// GetDocumentsResponseValidationError is the validation error returned by
// GetDocumentsResponse.Validate if the designated constraints aren't met.
type GetDocumentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentsResponseValidationError) ErrorName() string {
	return "GetDocumentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentsResponseValidationError{}

// Validate checks the field values on UpsertDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertDocumentRequestMultiError, or nil if none found.
func (m *UpsertDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertDocumentRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertDocumentRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImageUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "ImageUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "ImageUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertDocumentRequestValidationError{
				field:  "ImageUrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertDocumentRequestValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuthorId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "AuthorId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "AuthorId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthorId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertDocumentRequestValidationError{
				field:  "AuthorId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublisherId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "PublisherId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "PublisherId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublisherId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertDocumentRequestValidationError{
				field:  "PublisherId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCategoryId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "CategoryId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "CategoryId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategoryId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertDocumentRequestValidationError{
				field:  "CategoryId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "PublicationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertDocumentRequestValidationError{
					field:  "PublicationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertDocumentRequestValidationError{
				field:  "PublicationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertDocumentRequestMultiError(errors)
	}

	return nil
}

// UpsertDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertDocumentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertDocumentRequestMultiError) AllErrors() []error { return m }

// UpsertDocumentRequestValidationError is the validation error returned by
// UpsertDocumentRequest.Validate if the designated constraints aren't met.
type UpsertDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertDocumentRequestValidationError) ErrorName() string {
	return "UpsertDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertDocumentRequestValidationError{}

// Validate checks the field values on UpsertDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertDocumentResponseMultiError, or nil if none found.
func (m *UpsertDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertDocumentResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertDocumentResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertDocumentResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertDocumentResponseMultiError(errors)
	}

	return nil
}

// UpsertDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertDocumentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertDocumentResponseMultiError) AllErrors() []error { return m }

// UpsertDocumentResponseValidationError is the validation error returned by
// UpsertDocumentResponse.Validate if the designated constraints aren't met.
type UpsertDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertDocumentResponseValidationError) ErrorName() string {
	return "UpsertDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertDocumentResponseValidationError{}

// Validate checks the field values on GetChaptersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChaptersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChaptersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChaptersRequestMultiError, or nil if none found.
func (m *GetChaptersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChaptersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetChaptersRequestMultiError(errors)
	}

	return nil
}

// GetChaptersRequestMultiError is an error wrapping multiple validation errors
// returned by GetChaptersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetChaptersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChaptersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChaptersRequestMultiError) AllErrors() []error { return m }

// GetChaptersRequestValidationError is the validation error returned by
// GetChaptersRequest.Validate if the designated constraints aren't met.
type GetChaptersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChaptersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChaptersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChaptersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChaptersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChaptersRequestValidationError) ErrorName() string {
	return "GetChaptersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChaptersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChaptersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChaptersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChaptersRequestValidationError{}

// Validate checks the field values on GetChaptersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChaptersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChaptersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChaptersResponseMultiError, or nil if none found.
func (m *GetChaptersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChaptersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChaptersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChaptersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChaptersResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetChaptersResponseMultiError(errors)
	}

	return nil
}

// GetChaptersResponseMultiError is an error wrapping multiple validation
// errors returned by GetChaptersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetChaptersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChaptersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChaptersResponseMultiError) AllErrors() []error { return m }

// GetChaptersResponseValidationError is the validation error returned by
// GetChaptersResponse.Validate if the designated constraints aren't met.
type GetChaptersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChaptersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChaptersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChaptersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChaptersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChaptersResponseValidationError) ErrorName() string {
	return "GetChaptersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChaptersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChaptersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChaptersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChaptersResponseValidationError{}

// Validate checks the field values on UpsertChapterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertChapterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertChapterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertChapterRequestMultiError, or nil if none found.
func (m *UpsertChapterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertChapterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertChapterRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertChapterRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertChapterRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetIndex()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertChapterRequestValidationError{
					field:  "Index",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertChapterRequestValidationError{
					field:  "Index",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertChapterRequestValidationError{
				field:  "Index",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return UpsertChapterRequestMultiError(errors)
	}

	return nil
}

// UpsertChapterRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertChapterRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertChapterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertChapterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertChapterRequestMultiError) AllErrors() []error { return m }

// UpsertChapterRequestValidationError is the validation error returned by
// UpsertChapterRequest.Validate if the designated constraints aren't met.
type UpsertChapterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertChapterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertChapterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertChapterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertChapterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertChapterRequestValidationError) ErrorName() string {
	return "UpsertChapterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertChapterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertChapterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertChapterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertChapterRequestValidationError{}

// Validate checks the field values on UpsertChapterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertChapterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertChapterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertChapterResponseMultiError, or nil if none found.
func (m *UpsertChapterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertChapterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertChapterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertChapterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertChapterResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertChapterResponseMultiError(errors)
	}

	return nil
}

// UpsertChapterResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertChapterResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertChapterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertChapterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertChapterResponseMultiError) AllErrors() []error { return m }

// UpsertChapterResponseValidationError is the validation error returned by
// UpsertChapterResponse.Validate if the designated constraints aren't met.
type UpsertChapterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertChapterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertChapterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertChapterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertChapterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertChapterResponseValidationError) ErrorName() string {
	return "UpsertChapterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertChapterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertChapterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertChapterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertChapterResponseValidationError{}

// Validate checks the field values on GetPagesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPagesRequestMultiError, or nil if none found.
func (m *GetPagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChapterId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPagesRequestValidationError{
					field:  "ChapterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPagesRequestValidationError{
					field:  "ChapterId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChapterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPagesRequestValidationError{
				field:  "ChapterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetPagesRequestMultiError(errors)
	}

	return nil
}

// GetPagesRequestMultiError is an error wrapping multiple validation errors
// returned by GetPagesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPagesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPagesRequestMultiError) AllErrors() []error { return m }

// GetPagesRequestValidationError is the validation error returned by
// GetPagesRequest.Validate if the designated constraints aren't met.
type GetPagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPagesRequestValidationError) ErrorName() string { return "GetPagesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPagesRequestValidationError{}

// Validate checks the field values on GetPagesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPagesResponseMultiError, or nil if none found.
func (m *GetPagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPagesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPagesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPagesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPagesResponseMultiError(errors)
	}

	return nil
}

// GetPagesResponseMultiError is an error wrapping multiple validation errors
// returned by GetPagesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPagesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPagesResponseMultiError) AllErrors() []error { return m }

// GetPagesResponseValidationError is the validation error returned by
// GetPagesResponse.Validate if the designated constraints aren't met.
type GetPagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPagesResponseValidationError) ErrorName() string { return "GetPagesResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPagesResponseValidationError{}

// Validate checks the field values on CreatePagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePagesRequestMultiError, or nil if none found.
func (m *CreatePagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChapterId

	// no validation rules for Pages

	if len(errors) > 0 {
		return CreatePagesRequestMultiError(errors)
	}

	return nil
}

// CreatePagesRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePagesRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePagesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePagesRequestMultiError) AllErrors() []error { return m }

// CreatePagesRequestValidationError is the validation error returned by
// CreatePagesRequest.Validate if the designated constraints aren't met.
type CreatePagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePagesRequestValidationError) ErrorName() string {
	return "CreatePagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePagesRequestValidationError{}

// Validate checks the field values on CreatePagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePagesResponseMultiError, or nil if none found.
func (m *CreatePagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CreatePagesResponseMultiError(errors)
	}

	return nil
}

// CreatePagesResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePagesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePagesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePagesResponseMultiError) AllErrors() []error { return m }

// CreatePagesResponseValidationError is the validation error returned by
// CreatePagesResponse.Validate if the designated constraints aren't met.
type CreatePagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePagesResponseValidationError) ErrorName() string {
	return "CreatePagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePagesResponseValidationError{}

// Validate checks the field values on UpdatePageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePageRequestMultiError, or nil if none found.
func (m *UpdatePageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ChapterId

	// no validation rules for ImageUrl

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePageRequestValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePageRequestValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePageRequestValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Index

	if len(errors) > 0 {
		return UpdatePageRequestMultiError(errors)
	}

	return nil
}

// UpdatePageRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePageRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePageRequestMultiError) AllErrors() []error { return m }

// UpdatePageRequestValidationError is the validation error returned by
// UpdatePageRequest.Validate if the designated constraints aren't met.
type UpdatePageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePageRequestValidationError) ErrorName() string {
	return "UpdatePageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePageRequestValidationError{}

// Validate checks the field values on UpdatePageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePageResponseMultiError, or nil if none found.
func (m *UpdatePageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePageResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePageResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePageResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePageResponseMultiError(errors)
	}

	return nil
}

// UpdatePageResponseMultiError is an error wrapping multiple validation errors
// returned by UpdatePageResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdatePageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePageResponseMultiError) AllErrors() []error { return m }

// UpdatePageResponseValidationError is the validation error returned by
// UpdatePageResponse.Validate if the designated constraints aren't met.
type UpdatePageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePageResponseValidationError) ErrorName() string {
	return "UpdatePageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePageResponseValidationError{}

// Validate checks the field values on GetAuthorsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorsRequestMultiError, or nil if none found.
func (m *GetAuthorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetAuthorsRequestMultiError(errors)
	}

	return nil
}

// GetAuthorsRequestMultiError is an error wrapping multiple validation errors
// returned by GetAuthorsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAuthorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorsRequestMultiError) AllErrors() []error { return m }

// GetAuthorsRequestValidationError is the validation error returned by
// GetAuthorsRequest.Validate if the designated constraints aren't met.
type GetAuthorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorsRequestValidationError) ErrorName() string {
	return "GetAuthorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorsRequestValidationError{}

// Validate checks the field values on GetAuthorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorsResponseMultiError, or nil if none found.
func (m *GetAuthorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuthorsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuthorsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuthorsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAuthorsResponseMultiError(errors)
	}

	return nil
}

// GetAuthorsResponseMultiError is an error wrapping multiple validation errors
// returned by GetAuthorsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAuthorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorsResponseMultiError) AllErrors() []error { return m }

// GetAuthorsResponseValidationError is the validation error returned by
// GetAuthorsResponse.Validate if the designated constraints aren't met.
type GetAuthorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorsResponseValidationError) ErrorName() string {
	return "GetAuthorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorsResponseValidationError{}

// Validate checks the field values on GetPublishersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublishersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublishersRequestMultiError, or nil if none found.
func (m *GetPublishersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetPublishersRequestMultiError(errors)
	}

	return nil
}

// GetPublishersRequestMultiError is an error wrapping multiple validation
// errors returned by GetPublishersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPublishersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishersRequestMultiError) AllErrors() []error { return m }

// GetPublishersRequestValidationError is the validation error returned by
// GetPublishersRequest.Validate if the designated constraints aren't met.
type GetPublishersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishersRequestValidationError) ErrorName() string {
	return "GetPublishersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishersRequestValidationError{}

// Validate checks the field values on GetPublishersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublishersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublishersResponseMultiError, or nil if none found.
func (m *GetPublishersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublishersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublishersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublishersResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPublishersResponseMultiError(errors)
	}

	return nil
}

// GetPublishersResponseMultiError is an error wrapping multiple validation
// errors returned by GetPublishersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPublishersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishersResponseMultiError) AllErrors() []error { return m }

// GetPublishersResponseValidationError is the validation error returned by
// GetPublishersResponse.Validate if the designated constraints aren't met.
type GetPublishersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishersResponseValidationError) ErrorName() string {
	return "GetPublishersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishersResponseValidationError{}

// Validate checks the field values on Document with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Document) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Document with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DocumentMultiError, or nil
// if none found.
func (m *Document) ValidateAll() error {
	return m.validate(true)
}

func (m *Document) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImageUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "ImageUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "ImageUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "ImageUrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuthorId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "AuthorId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "AuthorId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthorId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "AuthorId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublisherId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "PublisherId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "PublisherId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublisherId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "PublisherId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCategoryId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "CategoryId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "CategoryId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategoryId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "CategoryId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "PublicationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentValidationError{
					field:  "PublicationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentValidationError{
				field:  "PublicationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DocumentMultiError(errors)
	}

	return nil
}

// DocumentMultiError is an error wrapping multiple validation errors returned
// by Document.ValidateAll() if the designated constraints aren't met.
type DocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentMultiError) AllErrors() []error { return m }

// DocumentValidationError is the validation error returned by
// Document.Validate if the designated constraints aren't met.
type DocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentValidationError) ErrorName() string { return "DocumentValidationError" }

// Error satisfies the builtin error interface
func (e DocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentValidationError{}

// Validate checks the field values on Chapter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Chapter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Chapter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChapterMultiError, or nil if none found.
func (m *Chapter) ValidateAll() error {
	return m.validate(true)
}

func (m *Chapter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Index

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return ChapterMultiError(errors)
	}

	return nil
}

// ChapterMultiError is an error wrapping multiple validation errors returned
// by Chapter.ValidateAll() if the designated constraints aren't met.
type ChapterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChapterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChapterMultiError) AllErrors() []error { return m }

// ChapterValidationError is the validation error returned by Chapter.Validate
// if the designated constraints aren't met.
type ChapterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChapterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChapterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChapterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChapterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChapterValidationError) ErrorName() string { return "ChapterValidationError" }

// Error satisfies the builtin error interface
func (e ChapterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChapter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChapterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChapterValidationError{}

// Validate checks the field values on Page with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Page) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Page with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PageMultiError, or nil if none found.
func (m *Page) ValidateAll() error {
	return m.validate(true)
}

func (m *Page) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ChapterId

	// no validation rules for ImageUrl

	// no validation rules for Index

	if len(errors) > 0 {
		return PageMultiError(errors)
	}

	return nil
}

// PageMultiError is an error wrapping multiple validation errors returned by
// Page.ValidateAll() if the designated constraints aren't met.
type PageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageMultiError) AllErrors() []error { return m }

// PageValidationError is the validation error returned by Page.Validate if the
// designated constraints aren't met.
type PageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageValidationError) ErrorName() string { return "PageValidationError" }

// Error satisfies the builtin error interface
func (e PageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageValidationError{}

// Validate checks the field values on Author with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Author) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Author with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthorMultiError, or nil if none found.
func (m *Author) ValidateAll() error {
	return m.validate(true)
}

func (m *Author) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return AuthorMultiError(errors)
	}

	return nil
}

// AuthorMultiError is an error wrapping multiple validation errors returned by
// Author.ValidateAll() if the designated constraints aren't met.
type AuthorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorMultiError) AllErrors() []error { return m }

// AuthorValidationError is the validation error returned by Author.Validate if
// the designated constraints aren't met.
type AuthorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorValidationError) ErrorName() string { return "AuthorValidationError" }

// Error satisfies the builtin error interface
func (e AuthorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorValidationError{}

// Validate checks the field values on Publisher with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Publisher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Publisher with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublisherMultiError, or nil
// if none found.
func (m *Publisher) ValidateAll() error {
	return m.validate(true)
}

func (m *Publisher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return PublisherMultiError(errors)
	}

	return nil
}

// PublisherMultiError is an error wrapping multiple validation errors returned
// by Publisher.ValidateAll() if the designated constraints aren't met.
type PublisherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublisherMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublisherMultiError) AllErrors() []error { return m }

// PublisherValidationError is the validation error returned by
// Publisher.Validate if the designated constraints aren't met.
type PublisherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublisherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublisherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublisherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublisherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublisherValidationError) ErrorName() string { return "PublisherValidationError" }

// Error satisfies the builtin error interface
func (e PublisherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublisher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublisherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublisherValidationError{}

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pagination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pagination with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaginationMultiError, or
// nil if none found.
func (m *Pagination) ValidateAll() error {
	return m.validate(true)
}

func (m *Pagination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PaginationMultiError(errors)
	}

	return nil
}

// PaginationMultiError is an error wrapping multiple validation errors
// returned by Pagination.ValidateAll() if the designated constraints aren't met.
type PaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMultiError) AllErrors() []error { return m }

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}

// Validate checks the field values on GetDocumentsResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentsResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentsResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentsResponse_DataMultiError, or nil if none found.
func (m *GetDocumentsResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentsResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDocuments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDocumentsResponse_DataValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDocumentsResponse_DataValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDocumentsResponse_DataValidationError{
					field:  fmt.Sprintf("Documents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentsResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentsResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentsResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDocumentsResponse_DataMultiError(errors)
	}

	return nil
}

// GetDocumentsResponse_DataMultiError is an error wrapping multiple validation
// errors returned by GetDocumentsResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type GetDocumentsResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentsResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentsResponse_DataMultiError) AllErrors() []error { return m }

// GetDocumentsResponse_DataValidationError is the validation error returned by
// GetDocumentsResponse_Data.Validate if the designated constraints aren't met.
type GetDocumentsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentsResponse_DataValidationError) ErrorName() string {
	return "GetDocumentsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentsResponse_DataValidationError{}

// Validate checks the field values on UpsertDocumentResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertDocumentResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertDocumentResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertDocumentResponse_DataMultiError, or nil if none found.
func (m *UpsertDocumentResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertDocumentResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertDocumentResponse_DataValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertDocumentResponse_DataValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertDocumentResponse_DataValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertDocumentResponse_DataMultiError(errors)
	}

	return nil
}

// UpsertDocumentResponse_DataMultiError is an error wrapping multiple
// validation errors returned by UpsertDocumentResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type UpsertDocumentResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertDocumentResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertDocumentResponse_DataMultiError) AllErrors() []error { return m }

// UpsertDocumentResponse_DataValidationError is the validation error returned
// by UpsertDocumentResponse_Data.Validate if the designated constraints
// aren't met.
type UpsertDocumentResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertDocumentResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertDocumentResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertDocumentResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertDocumentResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertDocumentResponse_DataValidationError) ErrorName() string {
	return "UpsertDocumentResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertDocumentResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertDocumentResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertDocumentResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertDocumentResponse_DataValidationError{}

// Validate checks the field values on GetChaptersResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChaptersResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChaptersResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChaptersResponse_DataMultiError, or nil if none found.
func (m *GetChaptersResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChaptersResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChapters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChaptersResponse_DataValidationError{
						field:  fmt.Sprintf("Chapters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChaptersResponse_DataValidationError{
						field:  fmt.Sprintf("Chapters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChaptersResponse_DataValidationError{
					field:  fmt.Sprintf("Chapters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChaptersResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChaptersResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChaptersResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetChaptersResponse_DataMultiError(errors)
	}

	return nil
}

// GetChaptersResponse_DataMultiError is an error wrapping multiple validation
// errors returned by GetChaptersResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetChaptersResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChaptersResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChaptersResponse_DataMultiError) AllErrors() []error { return m }

// GetChaptersResponse_DataValidationError is the validation error returned by
// GetChaptersResponse_Data.Validate if the designated constraints aren't met.
type GetChaptersResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChaptersResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChaptersResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChaptersResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChaptersResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChaptersResponse_DataValidationError) ErrorName() string {
	return "GetChaptersResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetChaptersResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChaptersResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChaptersResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChaptersResponse_DataValidationError{}

// Validate checks the field values on UpsertChapterResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertChapterResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertChapterResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertChapterResponse_DataMultiError, or nil if none found.
func (m *UpsertChapterResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertChapterResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChapter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertChapterResponse_DataValidationError{
					field:  "Chapter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertChapterResponse_DataValidationError{
					field:  "Chapter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChapter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertChapterResponse_DataValidationError{
				field:  "Chapter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertChapterResponse_DataMultiError(errors)
	}

	return nil
}

// UpsertChapterResponse_DataMultiError is an error wrapping multiple
// validation errors returned by UpsertChapterResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type UpsertChapterResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertChapterResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertChapterResponse_DataMultiError) AllErrors() []error { return m }

// UpsertChapterResponse_DataValidationError is the validation error returned
// by UpsertChapterResponse_Data.Validate if the designated constraints aren't met.
type UpsertChapterResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertChapterResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertChapterResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertChapterResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertChapterResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertChapterResponse_DataValidationError) ErrorName() string {
	return "UpsertChapterResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertChapterResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertChapterResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertChapterResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertChapterResponse_DataValidationError{}

// Validate checks the field values on GetPagesResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPagesResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPagesResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPagesResponse_DataMultiError, or nil if none found.
func (m *GetPagesResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPagesResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPagesResponse_DataValidationError{
						field:  fmt.Sprintf("Pages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPagesResponse_DataValidationError{
						field:  fmt.Sprintf("Pages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPagesResponse_DataValidationError{
					field:  fmt.Sprintf("Pages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPagesResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPagesResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPagesResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPagesResponse_DataMultiError(errors)
	}

	return nil
}

// GetPagesResponse_DataMultiError is an error wrapping multiple validation
// errors returned by GetPagesResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetPagesResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPagesResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPagesResponse_DataMultiError) AllErrors() []error { return m }

// GetPagesResponse_DataValidationError is the validation error returned by
// GetPagesResponse_Data.Validate if the designated constraints aren't met.
type GetPagesResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPagesResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPagesResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPagesResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPagesResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPagesResponse_DataValidationError) ErrorName() string {
	return "GetPagesResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetPagesResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPagesResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPagesResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPagesResponse_DataValidationError{}

// Validate checks the field values on UpdatePageResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePageResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePageResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePageResponse_DataMultiError, or nil if none found.
func (m *UpdatePageResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePageResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePageResponse_DataValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePageResponse_DataValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePageResponse_DataValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePageResponse_DataMultiError(errors)
	}

	return nil
}

// UpdatePageResponse_DataMultiError is an error wrapping multiple validation
// errors returned by UpdatePageResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdatePageResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePageResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePageResponse_DataMultiError) AllErrors() []error { return m }

// UpdatePageResponse_DataValidationError is the validation error returned by
// UpdatePageResponse_Data.Validate if the designated constraints aren't met.
type UpdatePageResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePageResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePageResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePageResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePageResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePageResponse_DataValidationError) ErrorName() string {
	return "UpdatePageResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePageResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePageResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePageResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePageResponse_DataValidationError{}

// Validate checks the field values on GetAuthorsResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorsResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorsResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorsResponse_DataMultiError, or nil if none found.
func (m *GetAuthorsResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorsResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAuthors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAuthorsResponse_DataValidationError{
						field:  fmt.Sprintf("Authors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAuthorsResponse_DataValidationError{
						field:  fmt.Sprintf("Authors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAuthorsResponse_DataValidationError{
					field:  fmt.Sprintf("Authors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuthorsResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuthorsResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuthorsResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAuthorsResponse_DataMultiError(errors)
	}

	return nil
}

// GetAuthorsResponse_DataMultiError is an error wrapping multiple validation
// errors returned by GetAuthorsResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetAuthorsResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorsResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorsResponse_DataMultiError) AllErrors() []error { return m }

// GetAuthorsResponse_DataValidationError is the validation error returned by
// GetAuthorsResponse_Data.Validate if the designated constraints aren't met.
type GetAuthorsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorsResponse_DataValidationError) ErrorName() string {
	return "GetAuthorsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorsResponse_DataValidationError{}

// Validate checks the field values on GetPublishersResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublishersResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishersResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublishersResponse_DataMultiError, or nil if none found.
func (m *GetPublishersResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishersResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPublishers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPublishersResponse_DataValidationError{
						field:  fmt.Sprintf("Publishers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPublishersResponse_DataValidationError{
						field:  fmt.Sprintf("Publishers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPublishersResponse_DataValidationError{
					field:  fmt.Sprintf("Publishers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPublishersResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPublishersResponse_DataValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPublishersResponse_DataValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPublishersResponse_DataMultiError(errors)
	}

	return nil
}

// GetPublishersResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetPublishersResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetPublishersResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishersResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishersResponse_DataMultiError) AllErrors() []error { return m }

// GetPublishersResponse_DataValidationError is the validation error returned
// by GetPublishersResponse_Data.Validate if the designated constraints aren't met.
type GetPublishersResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishersResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishersResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishersResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishersResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishersResponse_DataValidationError) ErrorName() string {
	return "GetPublishersResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishersResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishersResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishersResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishersResponse_DataValidationError{}
